#+TITLE: Fountain Mode
#+LANGUAGE: en
#+MACRO: version 3.4
#+MACRO: repo https://github.com/rnkn/fountain-mode
#+MACRO: tbc Sorry, this node is not yet written. You can help by submitting a patch!
#+OPTIONS: num:nil toc:nil
#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Fountain Mode: (fountain-mode)
#+TEXINFO_DIR_DESC: Write screenplays and stageplays

#+ATTR_TEXINFO: :tag n.b.
#+BEGIN_QUOTE
This manual is a work in progress with many parts still missing. Please consult the help functions within Emacs for current documentation.
#+END_QUOTE

Fountain Mode is a scriptwriting (both screenplays and stageplays) program for GNU Emacs version 24.4 or later. The Fountain markup format is a plain-text format designed to be easily readable and editable, portable and future-proof, and to look as much like a script as possible.

This is the Fountain Mode Manual updated for version {{{version}}}.

The upstream Fountain Mode repository is located at {{{repo}}}

* Copyright
  :PROPERTIES:
  :COPYING:  t
  :END:

* Installation
  :PROPERTIES:
  :DESCRIPTION: Getting started.
  :END:

Fountain Mode is a major mode for Emacs, which is to say it is a program that runs inside Emacs --- an extensible, customizable, free/libre text editor.

The latest stable release of Fountain Mode is available as an Emacs package via [[https://stable.melpa.org/#/fountain-mode][MELPA-stable]]. In order to install packages via MELPA-stable, you'll first need to add it to your package archives:

: M-x customize-option RET package-archives RET
    
Insert an entry named =melpa-stable= with the URL =https://stable.melpa.org/packages/=

You can then find the latest stable version of ~fountain-mode~ in the list returned by:

: M-x list-packages RET

If you like to live on the bleeding edge and prefer the latest but perhaps unstable version, do the above using [[https://melpa.org/#/fountain-mode][MELPA]]. Unless you are already familiar with debugging Elisp code, you are strongly encouraged to use the stable version.

** Requirements
   :PROPERTIES:
   :DESCRIPTION: Do you have what it takes?
   :END:

Fountain Mode is compatible with Emacs version 24.4 and later.

For Emacs versions older than 26.1, there is a bug in the ~outline~ library. This will be automatically patched provided ~fountain-patch-emacs-bugs~ is non-nil and Emacs is installed with its Elisp source files.

For Emacs versions older than 25.1, the ~seq~ library will need to be installed; if you install using the Emacs package management system, ~seq~ will be installed automatically.

** Advanced Installation
   :PROPERTIES:
   :DESCRIPTION: For the pros.
   :END:

Download the [[https://github.com/rnkn/fountain-mode/releases/latest][latest release]], move this file into your load-path and add the following to your ~init.el~ file:

: (require 'fountain-mode)

If you wish to contribute to or alter Fountain Mode's code, clone the repository into your load-path and require as above:

: git clone https://github.com/rnkn/fountain-mode.git

* Script Elements
  :PROPERTIES:
  :DESCRIPTION: The constituent parts of Fountain.
  :END:

The main idea of writing a script in Fountain is that you should be able to just start writing --- as long as your text looks like a script, you should end up with a script.

#+ATTR_TEXINFO: :tag n.b.
#+BEGIN_QUOTE
Fountain Mode uses the Fountain 1.1 syntax specification. While some programs use custom additions to the specification, these aren't considered official. For the greatest cross-compatibility, stick with the 1.1 spec.
#+END_QUOTE

** Metadata
   :PROPERTIES:
   :DESCRIPTION: Key-value info at the top of your script
   :ORDERED:  t
   :END:

A Fountain script usually starts with some metadata stating the basic info about the script. These are colon-separated key-value pairs at the start of a file, e.g. =key: value=.

Other Fountain-compatible programs may refer to this as ``title page'' info, but metadata can store information not related to or present on the title page.

Calling ~auto-insert~ will guide you through adding the most common Fountain metadata, prompting with likely defaults:

- ~title~ is pretty obvious, and will default to base-name of the current buffer.
- ~credit~ is not actually your name, but the type of credit given to the ~author~, e.g. =written by= or =screenplay by=.
- ~author~ is you or your writing team, and defaults to the value of variable ~user-full-name~.
- ~format~ will override the value of ~fountain-default-script-format~ for the current script. Accepted values are: =screenplay=, =teleplay=, =stageplay=.
- ~date~ defaults to the current date in your locale's ``preferred'' format.
- ~source~, for if you're writing an adaptation.
- ~contact~ is useful if the writer wants readers to ever get in touch to make the film/play!

All metadata keys can take either a single line of input following the colon, or a newline followed multiple lines indented with whitespace:

: author:
:     Mary Maryland
:     and
:     Alan Smithee

Metadata keys are case-insensitive, e.g. ~Title~ is the same as ~title~.

** Section Headings
   :PROPERTIES:
   :DESCRIPTION: Outline your script with # prefix headings
   :END:

Section headings are lines beginning with `#'.

There are five levels of section headings. See [[Outlining]].

** Scene Headings
   :PROPERTIES:
   :DESCRIPTION: Lines beginning with INT, EXT, etc.
   :END:

A scene begins with a scene heading.

Scene headings begin with a prefix, specified in ~fountain-scene-heading-prefix-list~, which defaults to =INT, EXT, EST, INT./EXT., INT/EXT, I/E=.

Each prefix may be followed by a dot and/or a space, so the following are equivalent:

#+BEGIN_EXAMPLE fountain
INT HOUSE - DAY

INT. HOUSE - DAY
#+END_EXAMPLE

#+ATTR_TEXINFO: :options fountain-scene-heading-prefix-list
#+BEGIN_defopt
This options allows setting your own scene heading prefixes. These entries are case insensitive.
#+END_defopt

#+ATTR_TEXINFO: :options fountain-scene-heading-suffix-sep
#+BEGIN_defopt
This option allows setting the separator (a regular expression) between the scene location and time of day. The default ~ --? ~ allows either = - = or = -- =.
#+END_defopt

See [[Scene Heading Completion]].

** Characters
   :PROPERTIES:
   :DESCRIPTION: Names are in UPPERCASE
   :END:
{{{tbc}}}

See [[Character Name Completion]].

** Dialogue
   :PROPERTIES:
   :DESCRIPTION: Text following character elements
   :END:
{{{tbc}}}

Dialogue is any test following a [[Characters][character name]].

** Parenthetics
   :PROPERTIES:
   :DESCRIPTION: Text inside (parens) within dialogue
   :END:
{{{tbc}}}

See [[Do What I Mean]].

** Transitions
   :PROPERTIES:
   :DESCRIPTION: Uppercase lines ending in TO:
   :END:
{{{tbc}}}
** Notes
   :PROPERTIES:
   :DESCRIPTION: Text within [[ double brackets ]]
   :END:
{{{tbc}}}
** Synopses
   :PROPERTIES:
   :DESCRIPTION: Lines beginning with =
   :END:

 A synopsis is a handy way to detail what a scene of section is about. A synopsis element is simply a line beginning with ~=~.

 : INT. FISHING TRAWLER - DAY
 : = The men eat the shark they caught.

 Synopses are not included by most export tools.

** Center Text
   :PROPERTIES:
   :DESCRIPTION: > Lines surrounded by greater/less than <
   :END:
{{{tbc}}}
** Comments
   :PROPERTIES:
   :DESCRIPTION: C-style multi-line comments (aka boneyard)
   :END:
{{{tbc}}}
* Outlining
  :PROPERTIES:
  :DESCRIPTION: Organize your script in pieces.
  :END:

There are five levels of section headings. Scene headings count as the sixth level headings.

Cycle an individual subtree visibility with ~TAB~. Cycle global outline visibility with ~S-TAB~ (shift-tab) or ~C-u TAB~.

If you like to work on discrete pieces of your script you can open these in indirect buffers.

#+ATTR_TEXINFO: :options fountain-outline-to-indirect-buffer
#+BEGIN_defun

#+END_defun

* Navigation
  :PROPERTIES:
  :DESCRIPTION: Fly through your script with ease.
  :END:
{{{tbc}}}
* Syntax Highlighting
  :PROPERTIES:
  :DESCRIPTION: Differentiate all the elements with colors.
  :END:
{{{tbc}}}
* Element Aligning
  :PROPERTIES:
  :DESCRIPTION: WYSIWYG visual indentation of script elements.
  :END:
{{{tbc}}}
* Text Emphasis
  :PROPERTIES:
  :DESCRIPTION: Bold, italic and underline.
  :END:

Text can be underlined, italic, bold, or a combination thereof.

Underlined text is surrounded by ~_underscores_~.

Italic text is surrounded by ~*single asterisks*~

Bold text is surrounded by ~**double asterisks**~

For the writer pursists who want to work the way our ancestors did on typewriters, stick to underlining.

* Autocompletion
  :PROPERTIES:
  :DESCRIPTION: Completion of frequently used text.
  :END:

One of the nicest things about using a dedicated scriptwriting program is that it helps you type less of the things you need to type a lot.

** Character Name Completion
   :PROPERTIES:
   :DESCRIPTION: For every time someone speaks.
   :END:

The most basic use of this is when pressing ~TAB~ on an empty line. If there's an empty line above, this will offer to autocomplete a character name. Character names are suggested in the order:

1. the second-to-last previously speaking character within the current scene, i.e. a character's conversational partner;
2. the last speaking character within the current scene, i.e. a character continuing speaking;
3. the remaining characters in the script in order of frequency (default if there are not yet speaking characters in the current scene).

~TAB~ will also offer character name completion if a line has a partial character name.

#+BEGIN_example foutain
MARY (|
#+END_example

When the cursor is after a character name and opening parenthesis, ~TAB~ will offer completions from ~fountain-character-extension-list~ plus ~fountain-continued-dialog-string~.

#+BEGIN_example foutain
MARY
|
I'm hungry.
#+END_example

When the cursor is at an empty line within dialogue, ~TAB~ will add an empty parenthetical.

#+BEGIN_example foutain
MARY
(|)
I'm hungry.
#+END_example

Likewise, if the cursor is within an empty parenthetical, ~TAB~ will remove the parenthetical.

#+BEGIN_example foutain
MARY
(angry|)
I'm hungry.
#+END_example

When the cursor is at the end of a non-empty parenthetical, either inside or outside the closing parenthesis, ~TAB~ will move to the beginning of the next line if the next line is non-empty, otherwise it will insert a newline.

#+BEGIN_example foutain
MARY
(angry)
I'm hungry.|
#+END_example

When the cursor is at the end of a non-empty line of dialogue, and the value of ~fountain-dwim-insert-next-character~ is non-nil, ~TAB~ will insert an empty line and the second-to-last previously speaking character.

#+BEGIN_example foutain
MARY
(angry)
I'm hungry.

JOHN|
#+END_example

The cursor will be left at the end of the next character, allowing successive presses of ~TAB~ to cycling through additional character completion candidates.

** Scene Heading Completion
   :PROPERTIES:
   :DESCRIPTION: Complete times and places.
   :END:

If the line has a partial scene heading, i.e. it begins with a prefix from ~fountain-scene-heading-prefix-list~ like so:

#+BEGIN_example foutain
INT. |
#+END_example

~TAB~ will offer completions of previously used locations.

If the cursor is at the time-of-day, like so:

#+BEGIN_example foutain
INT. SUBMARINE - |
#+END_example

~TAB~ will offer completions from ~fountain-scene-heading-suffix-list~.

* Do What I Mean
  :PROPERTIES:
  :DESCRIPTION: Traditional TAB-style autocompletion.
  :END:

Like many scriptwriting programs, in Fountain Mode pressing ~TAB~ will do the thing you mean depending on context.

This all might seem complicated, but the idea is by covering all the cases you don't have to think about it.

#+ATTR_TEXINFO: :options fountain-dwim
#+BEGIN_defun
This command, bound to ~TAB~ by default, will perform different actions based on context.
#+END_defun

1. If prefixed with ARG, call ~fountain-outline-cycle~ and pass ARG.
2. If point is inside an empty parenthetical, delete it.
3. If point is inside a non-empty parenthetical, move to a newline.
4. If point is at a blank line within dialogue, insert a parenthetical.
5. If point is at a note, cycle visibility of that note.
6. If point is at the end of line, call ~completion-at-point~.
7. If point is a scene heading or section heading, cycle visibility of that heading.

* Scene Numbering
  :PROPERTIES:
  :DESCRIPTION: Adding numbers to a script scenes.
  :END:
{{{tbc}}}
* Pagination
  :PROPERTIES:
  :DESCRIPTION: Counting a navigating script pages.
  :END:
{{{tbc}}}
* Exporting
  :PROPERTIES:
  :DESCRIPTION: Sharing your great writing!
  :END:

Exporting a script in Fountain Mode is handled by one or more external command-line tools. By defining an ``export profile'', you're able to easily interface with an external tool from within Emacs.

Essentiall an export profile is just a shell command, interpolated with a selection of values.

- =%b= is the ~buffer-file-name~
- =%B= is the ~buffer-file-name~ sans extension
- =%n= is the ~user-full-name~
- =%t= is the title (from Script [[Metadata]])
- =%a= is the author (from Script [[Metadata]])
- =%F= is the current date in ISO format
- =%x= is the current date in your locale's ``preferred'' format

#+ATTR_TEXINFO: :options fountain-export-command
#+BEGIN_defun
This command, bound to ~C-c C-e~ by default, will prompt for an export profile.
#+END_defun

- [[https://github.com/ifrost/afterwriting-labs][Afterwriting]] (JavaScript)
- [[https://github.com/Wraparound/wrap][Wrap]] (Go)
- [[https://github.com/vilcans/screenplain][Screenplain]] (Python 3)
- [[https://github.com/olivertaylor/Textplay][Textplay]] (Ruby) [fn:1]

[fn:1] Requires [[https://www.princexml.com][PrinceXML]] for PDF export.

* Indexes
** Index of Commands
   :PROPERTIES:
   :INDEX:    cp
   :END:
** Index of Variables
   :PROPERTIES:
   :INDEX:    vr
   :END:
