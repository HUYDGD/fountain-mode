#+title: Fountain Mode
#+language: en
#+macro: version 3.2
#+options: num:nil toc:nil
#+texinfo_dir_category: Emacs
#+texinfo_dir_title: Fountain Mode: (fountain-mode)
#+texinfo_dir_desc: Write screenplays and stageplays

#+attr_texinfo: :tag n.b.
#+begin_quote
This manual is a work in progress and does not represent complete documentation.
#+end_quote

Fountain is a markup format for writing scripts (both screenplays and stageplays) in plain text. It is designed to be easily readable and editable, and to look as much like a script as possible.

This is the Fountain Mode Manual updated for version {{{version}}}.

* Copyright
  :PROPERTIES:
  :COPYING:  t
  :END:

* Installation
  :PROPERTIES:
  :DESCRIPTION: Getting started.
  :END:

Fountain Mode is a major mode for Emacs, which is to say it is a program that runs inside Emacs --- an extensible, customizable, free/libre text editor.

The latest stable release of Fountain Mode is available as an Emacs package via [[https://stable.melpa.org/#/fountain-mode][MELPA-stable]]. In order to install packages via MELPA-stable, you'll first need to add it to your package archives:

: M-x customize-option RET package-archives RET
    
Insert an entry named ~melpa-stable~ with the URL ~https://stable.melpa.org/packages/~

You can then find the latest stable version of ~fountain-mode~ in the list returned by:

: M-x list-packages RET

If you like to live on the bleeding edge and prefer the latest but perhaps unstable version, do the above using [[https://melpa.org/#/fountain-mode][MELPA]]. Unless you are already familiar with debugging Elisp code, you are strongly encouraged to use the stable version.

** Advanced Installation
   :PROPERTIES:
   :DESCRIPTION: For the pros.
   :END:

Download the [[https://github.com/rnkn/fountain-mode/releases/latest][latest release]], move this file into your load-path and add the following to your ~init.el~ file:

: (require 'fountain-mode)

If you wish to contribute to or alter Fountain Mode's code, clone the repository into your load-path and require as above:

: git clone https://github.com/rnkn/fountain-mode.git

* Script Elements

The main idea of writing a script in Fountain is that you should be able to just start writing what looks like a script and you'll get a script.

** Metadata
   :PROPERTIES:
   :DESCRIPTION: Key-value info at the top of your script
   :END:

- =title=
- =credit=
- =author=

Calling ~auto-insert~ will guide you through adding the basic Fountain metadata.

** Section Headings
   :PROPERTIES:
   :DESCRIPTION: Outline your script with # prefix headings
   :END:

Section headings are lines beginning with `#'.

There are five levels of section headings. See [[Outlining]].

** Scene Headings
   :PROPERTIES:
   :DESCRIPTION: Lines beginning with INT, EXT, etc.
   :END:

A scene begins with a scene heading.

Scene headings begin with a prefix, specified in ~fountain-scene-heading-prefix-list~, which defaults to =INT, EXT, EST, INT./EXT., INT/EXT, I/E=.

Each prefix may be followed by a dot and/or a space, so the following are equivalent:

#+begin_example fountain
INT HOUSE - DAY

INT. HOUSE - DAY
#+end_example

#+attr_texinfo: :options fountain-scene-heading-prefix-list
#+begin_defopt
This options allows setting your own scene heading prefixes. These entries are case insensitive.
#+end_defopt

#+attr_texinfo: :options fountain-scene-heading-suffix-sep
#+begin_defopt
This option allows setting the separator (a regular expression) between the scene location and time of day. The default ~ --? ~ allows either = - = or = -- =.
#+end_defopt

See [[Autocompletion]].

** Characters
   :PROPERTIES:
   :DESCRIPTION: Names are in UPPERCASE
   :END:

See [[Do What I Mean]].

** Dialogue
   :PROPERTIES:
   :DESCRIPTION: Text following character elements
   :END:
** Parenthetics
   :PROPERTIES:
   :DESCRIPTION: Text inside (parens) within dialogue
   :END:

See [[Do What I Mean]].

** Transitions
   :PROPERTIES:
   :DESCRIPTION: Uppercase lines ending in TO:
   :END:
** Notes
   :PROPERTIES:
   :DESCRIPTION: Text within [[ double brackets ]]
   :END:
** Synopses
   :PROPERTIES:
   :DESCRIPTION: Lines beginning with =
   :END:

 A synopsis is a handy way to detail what a scene of section is about. A synopsis element is simply a line beginning with ~=~.

 : INT. FISHING TRAWLER - DAY
 : = The men eat the shark they caught.

 Synopses are not included by most export tools.

** Center Text
   :PROPERTIES:
   :DESCRIPTION: > Lines surrounded by greater/less than <
   :END:
** Comments
   :PROPERTIES:
   :DESCRIPTION: C-style multi-line comments (aka boneyard)
   :END:
* Outlining

There are five levels of section headings. Scene headings count as the sixth level headings.

Cycle an individual subtree visibility with ~TAB~. Cycle global outline visibility with ~S-TAB~ (shift-tab) or ~C-u TAB~.

* Navigation
  :PROPERTIES:
  :DESCRIPTION: Fly through your script with ease.
  :END:

* Syntax Highlighting
  :PROPERTIES:
  :DESCRIPTION: Differentiate all the elements with colors.
  :END:

* Element Aligning
  :PROPERTIES:
  :DESCRIPTION: WYSIWYG visual indentation of script elements
  :END:

* Text Emphasis

Text can be underlined, italic, bold, or a combination thereof.

Underlined text is surrounded by ~_underscores_~.

Italic text is surrounded by ~*single asterisks*~

Bold text is surrounded by ~**double asterisks**~

For the writer pursists who want to work the way our ancestors did on typewriters, stick to underlining.

* Autocompletion
* Do What I Mean
  :PROPERTIES:
  :DESCRIPTION: Traditional TAB-style autocompletion
  :END:

Call a command based on context.

#+attr_texinfo: :options fountain-dwim
#+begin_defun
This command, bound to ~TAB~ by default, will perform different actions based on context.
#+end_defun

1. If prefixed with ARG, call ~fountain-outline-cycle~ and pass ARG.
2. If point is inside an empty parenthetical, delete it.
3. If point is inside a non-empty parenthetical, move to a newline.
4. If point is at a blank line within dialogue, insert a parenthetical.
5. If point is at a note, cycle visibility of that note.
6. If point is at the end of line, call ~completion-at-point~.
7. If point is a scene heading or section heading, cycle visibility of that heading.

* Scene Numbering
* Pagination
* Exporting
  :PROPERTIES:
  :DESCRIPTION: Sharing your great writing!
  :END:

- [[https://github.com/ifrost/afterwriting-labs][Afterwriting (JavaScript)]]
- [[https://github.com/Wraparound/wrap][Wrap (Go)]]
- [[https://github.com/vilcans/screenplain][Screenplain (Python 2)]]
- [[https://github.com/olivertaylor/Textplay][Textplay (Ruby)]] [fn:1]

[fn:1] Requires [[https://www.princexml.com][PrinceXML]] for PDF export.

* Indexes
** Index of Commands
   :PROPERTIES:
   :INDEX:    cp
   :END:
** Index of Variables
   :PROPERTIES:
   :INDEX:    vr
   :END:
